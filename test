// 1) Déclare un type unique
export type SortState = {
  sortKey: string | null;
  isAsc: boolean | null;
};

// 2) État initial
protected currentSort: SortState = { sortKey: null, isAsc: null };

// 3) Handler appelé par (sortChanged)
protected onSortChanged(sort: { sortKey: string | null; isAsc: boolean | null }): void {
  this.currentSort = { sortKey: sort.sortKey, isAsc: sort.isAsc }; // << nouvelle référence
  this.currentPage = 0;
  this.scrollCompleted = false;
  this.allPagesLoaded = false;
  this.tickets = [];
  this.loadedElements = 0;
  this.hasPendingPage = true;

  const card = this.activeCard ?? FilterCardType.NONE;
  const opts = {
    sortKey: sort.sortKey,
    isAsc: sort.isAsc,
    searchTerm: this.searchTerm?.trim() ?? '',
    statusFilter: this.selectedStatus ?? '',
    agencyFilter: this.selectedAgency ?? '',
    collaboratorFilter: this.selectedCollaborator ?? '',
    campaignFilter: this.selectedCampaign ?? '',
    searchTypeFilter: this.selectedSearchType ?? '',
  };

  this.loadTicketsByCard(card, this.currentContext, 0, opts).subscribe({
    next: (response) => this.handleTicketResponse(response),
    error: (err) => console.error('Erreur tri page 0 :', err),
  });
}

// 4) Dans loadTicketsByCard(...) : utilise le même modèle
public loadTicketsByCard(
  type: FilterCardType,
  context: TicketContext,
  page: number = 0,
  opts?: {
    sortKey?: string | null;
    isAsc?: boolean | null;
    searchTerm?: string;
    statusFilter?: string;
    agencyFilter?: string;
    collaboratorFilter?: string;
    campaignFilter?: string;
    searchTypeFilter?: string;
  }
): Observable<MbotList> {
  const params = { ...this.listService.getCurrentParams() };

  // ... (status/listType/etc.)

  // ➜ prend le tri depuis opts sinon depuis currentSort
  const effective = (opts && (opts.sortKey != null || opts.isAsc != null))
    ? { sortKey: opts.sortKey ?? null, isAsc: opts.isAsc ?? null }
    : this.currentSort;

  if (effective.sortKey != null && effective.isAsc != null) {
    params.sortKey = effective.sortKey;
    params.isAsc = effective.isAsc;
  }

  // ... (autres filtres + return service)
}



