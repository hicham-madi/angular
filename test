protected onCardClicked(type: FilterCardType): void {
  this.cardClickedOnce = true;

  const nextCard = this.activeCard === type ? FilterCardType.NONE : type;

  // maj Ã©tat local minimal
  this.activeCard = nextCard;
  this.resetPagination();

  // ðŸ‘‰ ne plus appeler loadTicketsByCard ici
  this.router.navigate([], {
    relativeTo: this.route,
    queryParams: { card: nextCard === FilterCardType.NONE ? null : nextCard },
    queryParamsHandling: 'merge'
  });
}

ngOnInit() {
  this.sub = this.route.queryParamMap.pipe(
    map(p => (p.get('card') as FilterCardType) ?? FilterCardType.NONE),
    distinctUntilChanged(),               // Ã©vite les doublons
    tap(card => { this.activeCard = card; this.resetPagination(); }),
    switchMap(card => this.loadTicketsByCard(card, this.currentContext, 0, this.buildOpts())),
    // shareReplay(1) si tu rÃ©utilises le rÃ©sultat ailleurs
  ).subscribe({
    next: res => this.hydrateFromResponse(res),
    error: err => { console.error('Erreur WS', err); this.isLoading = false; }
  });
}

ngOnDestroy() { this.sub?.unsubscribe(); }

protected goToList(): void {
  const lastCard = localStorage.getItem('lastSelectedCard') ?? null; // ou supprime ce storage et passes tout par lâ€™URL
  const route: string[] = ['/ticket-list']; // ou '/ticket-list/team-list' selon contexte

  this.router.navigate(route, {
    queryParams: lastCard ? { card: lastCard } : {},
    replaceUrl: true // optionnel
  });
}
