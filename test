public ngOnInit(): void {
  const data = this.route.snapshot.data['prefetch'] as TicketListPrefetch;

  // prefs / contexte depuis le resolver
  this.enableReclamation = data?.env?.preferences?.enableReclamation ?? false;
  this.enableDiscussionGroupForCustomer = data?.env?.preferences?.enableDiscussionGroupForCustomer ?? false;
  this.enableDs = data?.env?.preferences?.enableDs ?? false;

  this.currentContext = data.context;
  this.currentTab = data.initialTab;

  // colonnes par défaut issues du resolver (évite le flicker)
  if (!this.displayedColumns.length) this.displayedColumns = data.config.displayedColumns;
  if (!Object.keys(this.columnConfig || {}).length) this.columnConfig = data.config.columnConfig;

  // carte active décidée par le resolver
  this.activeCard = data.cardType ?? FilterCardType.NONE;

  // appliquer les colonnes selon la carte active
  this.applyColumnsForCard(this.activeCard);

  // mémoriser la carte sélectionnée
  if (this.activeCard && this.activeCard !== FilterCardType.NONE) {
    localStorage.setItem('lastSelectedCard', this.activeCard.toString());
  } else {
    localStorage.removeItem('lastSelectedCard');
  }

  // si le resolver renvoie des compteurs et tickets
  this.ticketCardInfos = data.stats ?? this.ticketCardInfos;
  this.hydrateFromResponse(data.tickets, true);

  // abonner les changements d’URL/onglet
  this.initialization(this.currentContext);
}

protected initialization(context: TicketContext): void {
  this.currentContext = context;

  let first = true; // ignorer la 1ʳᵉ émission (déjà traitée par ngOnInit)
  this.route.queryParamMap.subscribe(params => {
    const qp = params.get('card') as FilterCardType | null;
    const cardType: FilterCardType = qp ?? FilterCardType.NONE;

    if (first) { first = false; return; }

    // adapter les colonnes à la carte demandée par l’URL
    this.applyColumnsForCard(cardType);

    // ne recharger que si la carte change
    if (cardType !== this.activeCard) {
      this.onCardClicked(cardType); // déclenche le WS et l’affichage
    }

    // garder l’état en mémoire
    this.activeCard = cardType;
    if (cardType && cardType !== FilterCardType.NONE) {
      localStorage.setItem('lastSelectedCard', cardType.toString());
    } else {
      localStorage.removeItem('lastSelectedCard');
    }
  });
}

/** Met à jour les colonnes selon le contexte et la carte (ex. FOUND_CUSTOMERS) */
private applyColumnsForCard(card: FilterCardType): void {
  let cfg: { displayedColumns: string[]; columnConfig: Record<string, ColumnDefinition> };

  switch (this.currentContext) {
    case TicketContext.TEAM:
    case TicketContext.TERMINATED_TEAM:
      cfg = this.tableConfigFactory.getColumnsForTeamPage();
      break;

    case TicketContext.REGIONAL_FUND:
      cfg = (card === FilterCardType.FOUND_CUSTOMERS)
        ? this.tableConfigFactory.getColumnsForFoundCustomers()
        : this.tableConfigFactory.getColumnsForRegionalFundPage();
      break;

    default:
      cfg = this.tableConfigFactory.getBaseColumns();
  }

  this.displayedColumns = cfg.displayedColumns;
  this.columnConfig = cfg.columnConfig;
  this.cdr.markForCheck?.();
}
