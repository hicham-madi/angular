public MbotPageDtoV2 filterTickets(MbotRequestDataDtoV2 mbotRequestData) {
    User user = securityService.getAuthUser();
    Customer customer = this.getCustomer(user) != null ? this.getCustomer(user) : Customer.builder().build();

    TicketFiltersDto filters = ticketBuilderService.buildTicketFilterFromMbotRequestData(customer, mbotRequestData);
    Pageable pageable = FiltersHelper.getPageable(filters);

    List<Ticket> tickets = hazelcastRepository.findMatchingTickets(
        user.getOrg(), filters.getCustomer().getId(), filters.getCustomer().getEdsId());

    List<Ticket> paginatedTickets = tickets.stream()
        .filter(ticket -> matchesSearchTerm(ticket, mbotRequestData.getSearchTerm()))
        .filter(ticket -> matchesStatus(ticket, mbotRequestData.getStatusFilter()))
        .filter(ticket -> matchesAgency(ticket, mbotRequestData.getAgencyFilter()))
        .filter(ticket -> matchesCollaborator(ticket, mbotRequestData.getCollaboratorFilter()))
        .filter(ticket -> matchesCampaign(ticket, mbotRequestData.getCampaignFilter()))
        .toList();

    long totalElements = paginatedTickets.size();
    List<MbotTicketLightDto> ticketLightDtos = IMapperTicket.INSTANCE
        .listTicketToListMbotTicketDto(paginatedTickets);

    return MbotPageDtoV2.builder()
        .tickets(new PageImpl<>(ticketLightDtos, pageable, totalElements))
        .build();
}

private boolean matchesSearchTerm(Ticket ticket, String searchTerm) {
    if (StringUtils.isEmpty(searchTerm)) return true;

    return (ticket.getPart() != null && StringUtils.isNotEmpty(ticket.getPart().getLabel())
                && containsIgnoreCase(ticket.getPart().getLabel(), searchTerm))
        || (ticket.getDomain() != null && StringUtils.isNotEmpty(ticket.getDomain().getLabel())
                && containsIgnoreCase(ticket.getDomain().getLabel(), searchTerm))
        || (ticket.getSubDomain() != null && StringUtils.isNotEmpty(ticket.getSubDomain().getLabel())
                && containsIgnoreCase(ticket.getSubDomain().getLabel(), searchTerm))
        || (ticket.getObject() != null && StringUtils.isNotEmpty(ticket.getObject().getLabel())
                && containsIgnoreCase(ticket.getObject().getLabel(), searchTerm));
}

private boolean matchesStatus(Ticket ticket, String statusFilter) {
    return StringUtils.isEmpty(statusFilter)
        || StringUtils.equalsIgnoreCase(ticket.getStatus(), statusFilter);
}

private boolean matchesAgency(Ticket ticket, String agencyFilter) {
    return StringUtils.isEmpty(agencyFilter)
        || (ticket.getCustomer() != null && containsIgnoreCase(ticket.getCustomer().getEdsName(), agencyFilter));
}

private boolean matchesCollaborator(Ticket ticket, String collaboratorFilter) {
    return StringUtils.isEmpty(collaboratorFilter)
        || (ticket.getCustomer() != null && containsIgnoreCase(ticket.getCustomer().getName(), collaboratorFilter));
}

private boolean matchesCampaign(Ticket ticket, String campaignFilter) {
    return StringUtils.isEmpty(campaignFilter)
        || (ticket.getG() != null && ticket.getG().getCampaign() != null &&
            containsIgnoreCase(ticket.getG().getCampaign().getLabel(), campaignFilter));
}
