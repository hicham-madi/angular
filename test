public static Predicate<Object, Ticket> discussionGroupsReadCustomer(String userId) {
    PredicateBuilder.EntryObject e = Predicates.newPredicateBuilder().getEntryObject();
    return e.get("discussionGroup.users").any(
        Predicates.and(
            Predicates.equal("id", userId),
            Predicates.equal("ticketRead", false)
        )
    );
}
public static Predicate<Object, Ticket> discussionGroupsReadCustomer(String userId) {
    PredicateBuilder.EntryObject e = Predicates.newPredicateBuilder().getEntryObject();
    return e.get("discussionGroup.users").any(
        Predicates.and(
            Predicates.equal("id", userId),
            Predicates.equal("ticketRead", false)
        )
    );
}
case DISCUSSION_GROUPS_READ_CUSTOMER -> TicketCriteria.discussionGroupsReadCustomer(customer.getId());
public static Predicate<Object> discussionGroupsReadCustomer(String userId) {
    return ticket -> {
        if (!(ticket instanceof Ticket)) return false;

        Ticket t = (Ticket) ticket;
        DiscussionGroup discussionGroup = t.getDiscussionGroup();
        if (discussionGroup == null || discussionGroup.getUsers() == null) return false;

        return discussionGroup.getUsers().stream()
            .anyMatch(user -> userId.equals(user.getId()) && !user.isTicketRead());
    };
}
