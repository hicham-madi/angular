import { Component, Output, EventEmitter, DestroyRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';

@Component({ /* ... */ })
export class FilterBarComponent {
  @Output() searchChanged = new EventEmitter<string>();

  public searchTextControl = new FormControl<string>('', { nonNullable: true });

  constructor(private destroyRef: DestroyRef) {}

  ngOnInit(): void {
    this.searchTextControl.valueChanges
      .pipe(
        debounceTime(300),
        distinctUntilChanged(),
        takeUntilDestroyed(this.destroyRef) // ici Ã§a marche
      )
      .subscribe(v => this.searchChanged.emit((v ?? '').trim()));
  }
}
