private fetchPage(page: number, card: FilterCardType): void {
  this.isLoading = true;

  const params = this.buildParams(page);         // met à jour ListService avec les filtres courants
  if (card !== FilterCardType.NONE) params.cardType = card;

  const source$ =
    card === FilterCardType.NONE
      ? this.mbotService.getTicketListV2(params) // liste filtrée
      : this.cardConfigFactory.loadTicketsByCard(
          card,
          this.currentContext,
          page,
          { sortKey: params.sortKey, isAsc: params.isAsc } // ✅ seulement le tri
        );

  source$.subscribe({
    next: (response) => this.handleTicketResponse(response),
    error: (err) => console.error('Erreur chargement tickets :', err),
    complete: () => { this.isLoading = false; }
  });
}

const p = this.listService.reinitParam(page);
p.searchTerm         = this.searchTerm?.trim() ?? '';
p.statusFilter       = this.selectedStatus ?? '';
p.agencyFilter       = this.selectedAgency ?? '';
p.collaboratorFilter = this.selectedCollaborator ?? '';
p.campaignFilter     = this.selectedCampaign ?? '';
this.listService.setCurrentParams(p); // <-- ou équivalent
return p;

