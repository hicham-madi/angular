// solicitings-table.component.ts
import { SimpleChanges } from '@angular/core';

export class SolicitingsTableComponent {
  // ... tes @Input existants
  @Input() public hasPendingPage = false;
  @Input() public loadingNextPage = false;

  private scrollLocked = false;
  private lastLength = 0;
  private prevLoading = false;

  public ngOnChanges(changes: SimpleChanges): void {
    // 1) R√©armement quand la longueur change (nouvelle page vraiment append√©e)
    const len = this.tickets?.length ?? 0;
    if (len !== this.lastLength) {
      this.lastLength = len;
      this.scrollLocked = false;
    }

    // 2) R√©armement quand un chargement se termine, m√™me si rien n'a √©t√© ajout√©
    if (changes['loadingNextPage']) {
      const prev = this.prevLoading;
      const curr = this.loadingNextPage;
      this.prevLoading = curr;

      // On vient de passer de "en cours" √† "termin√©"
      if (prev && !curr && this.hasPendingPage) {
        this.scrollLocked = false;
      }
    }
  }

  public onCdkScroll(): void {
    if (!this.hasPendingPage) return;
    if (this.loadingNextPage) return;
    if (this.scrollLocked) return;

    const end = this.viewport.getRenderedRange().end;
    const total = this.viewport.getDataLength();

    // d√©clenche au bas (offset 1 item)
    if (end < Math.max(0, total - 1)) return;

    this.scrollLocked = true; // üîí anti-rafale imm√©diat

    this.loadMore.emit({
      sortKey: this.sort?.active ?? null,
      isAsc: this.sort?.direction === 'asc'
        ? true
        : this.sort?.direction === 'desc'
          ? false
          : null,
    });
  }
}

