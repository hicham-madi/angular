import { map, distinctUntilChanged, skip, takeUntilDestroyed } from 'rxjs';

protected initialization(context: TicketContext): void {
  this.currentContext = context;

  const initialCard = this.activeCard; // défini depuis le resolver

  this.route.queryParamMap.pipe(
    map(qp => (qp.get('card') ?? '') as keyof typeof FilterCardType),
    map(k => (k && FilterCardType[k] !== undefined ? FilterCardType[k] : FilterCardType.NONE)),
    distinctUntilChanged(),
    // évite la 1re émission (celle de la navigation actuelle, déjà préchargée par le resolver)
    skip(1),
    takeUntilDestroyed(this.destroyRef) // si tu utilises destroyRef
  ).subscribe(card => {
    if (card !== initialCard) {
      this.onCardClicked(card);           // appellera l’API selon la carte
      // persistance
      if (card !== FilterCardType.NONE) {
        localStorage.setItem('lastSelectedCard', card.toString());
      } else {
        localStorage.removeItem('lastSelectedCard');
      }
    }
  });
}
