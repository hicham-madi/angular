protected sortData(column: string): void {
  if (this.sort.active !== column) {
    this.currentSortDirection = 'asc';
  } else {
    this.currentSortDirection =
      this.currentSortDirection === null ? 'asc' :
      this.currentSortDirection === 'asc' ? 'desc' :
      null;
  }

  this.sort.active = column;
  this.sort.direction = this.currentSortDirection ?? ''; // affichage icÃ´ne tri
  this.fetchTickets(column, this.currentSortDirection);
}
private fetchTickets(sortBy: string, sortDirection: 'asc' | 'desc' | null) {
  const request = {
    page: 0,
    totalItems: this.totalItems,
    sortKey: sortDirection ? sortBy : null,     // Ne pas envoyer de tri
    isAsc: sortDirection === 'asc',
  };

  this.mbotService.getTicketListV2(request).subscribe(response => {
    this.tickets = response.tickets?.content ?? [];
    this.detectChanges();
  });
}
