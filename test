public class TicketPredicates {

    public static Predicate getAllMatchingPredicate(String customerId, String customerEdsId) {
        List<Predicate> predicates = new ArrayList<>();

        // Sollicitations D/DC
        predicates.add(Predicates.and(
                Predicates.in("claimType.code", "D", "DC"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.equal("customer._id", customerId)
        ));

        predicates.add(Predicates.and(
                Predicates.in("claimType.code", "D", "DC"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.equal("customer._id", customerId),
                Predicates.equal("readCustomer", false)
        ));

        // Réclamations RC
        predicates.add(Predicates.and(
                Predicates.in("claimType.code", "RC"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.equal("customer._id", customerId)
        ));

        predicates.add(Predicates.and(
                Predicates.in("claimType.code", "RC"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.equal("customer._id", customerId),
                Predicates.equal("readCustomer", false)
        ));

        // Approbations
        predicates.add(Predicates.and(
                Predicates.equal("approval.manager", customerId),
                Predicates.or(
                        Predicates.equal("status", "APPROVAL_PENDING"),
                        Predicates.and(
                                Predicates.equal("status", "APPROVAL_REFUSED"),
                                Predicates.equal("approval.discussion", true)
                        )
                )
        ));

        // Groupes de discussion
        predicates.add(Predicates.equal("discussionGroup.users._id", customerId));

        // Groupes de discussion non lus
        predicates.add(Predicates.and(
                Predicates.equal("discussionGroup.users._id", customerId),
                Predicates.equal("discussionGroup.users.ticketRead", false)
        ));

        // DS combinées
        predicates.add(Predicates.and(
                Predicates.in("claimType.code", "DS"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.or(
                        Predicates.equal("ds.collabTreatmentDone", false),
                        Predicates.and(
                                Predicates.equal("ds.collabTreatmentDone", true),
                                Predicates.equal("readCustomer", false)
                        )
                ),
                Predicates.or(
                        Predicates.equal("customer._id", customerId),
                        Predicates.and(
                                Predicates.equal("customer.eds", true),
                                Predicates.equal("customer.edsId", customerEdsId)
                        )
                )
        ));

        // DS en retard
        predicates.add(Predicates.and(
                Predicates.equal("ds.treatmentIsLate", true),
                Predicates.in("claimType.code", "DS"),
                Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
                Predicates.or(
                        Predicates.equal("ds.collabTreatmentDone", false),
                        Predicates.and(
                                Predicates.equal("ds.collabTreatmentDone", true),
                                Predicates.equal("readCustomer", false)
                        )
                ),
                Predicates.or(
                        Predicates.equal("customer._id", customerId),
                        Predicates.and(
                                Predicates.equal("customer.eds", true),
                                Predicates.equal("customer.edsId", customerEdsId)
                        )
                )
        ));

        // DS affectées à l'unité
        predicates.add(Predicates.and(
                Predicates.equal("customer.eds", true),
                Predicates.equal("customer.edsId", customerEdsId),
                Predicates.in("claimType.code", "DS")
        ));

        return Predicates.or(predicates.toArray(new Predicate[0]));
    }
}
@Service
public class TicketService {

    private final TicketCustomRepository ticketCustomRepository;

    @Autowired
    public TicketService(TicketCustomRepository ticketCustomRepository) {
        this.ticketCustomRepository = ticketCustomRepository;
    }

    public List<Document> getAllMatchingTickets(String customerId, String customerEdsId) {
        Predicate predicate = TicketPredicates.getAllMatchingPredicate(customerId, customerEdsId);
        return ticketCustomRepository.findAllMatchingTickets(predicate);
    }
}
@Repository
public class TicketCustomRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public TicketCustomRepository(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public List<Document> findAllMatchingTickets(Predicate predicate) {
        Query query = new Query(predicateToCriteria(predicate));
        return mongoTemplate.find(query, Document.class, "tickets_CR882");
    }

    private Criteria predicateToCriteria(Predicate predicate) {
        // Utilisez ici votre propre adaptateur de Predicate -> Criteria si vous en avez un
        // Ou construisez-le vous-même à partir de la liste des conditions du Predicate
        throw new UnsupportedOperationException("predicateToCriteria doit être implémenté");
    }
}
