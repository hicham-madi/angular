import { FilterCardType } from '...';
import { MetabotActionType } from '...';

private buildTicketListUrl(type: FilterCardType): string {
  const base = `${this.origin}/metabot/ticket-list`;

  // mapping explicite → ce qui est envoyé dans ?card=
  const cardMap: Partial<Record<FilterCardType, string>> = {
    [FilterCardType.REQUESTS]: 'REQUESTS',
    [FilterCardType.CLAIMS]: 'CLAIMS',
    [FilterCardType.APPROVALS]: 'APPROVALS',
    [FilterCardType.DISCUSSION_GROUPS]: 'DISCUSSION_GROUPS',
    [FilterCardType.REQUESTS_EXPERT_SERVICE]: 'REQUESTS_EXPERT_SERVICE',
  };

  const card = cardMap[type];
  return card ? `${base}?card=${encodeURIComponent(card)}` : base;
}

protected onCardClicked(type: FilterCardType): void {
  const url = this.buildTicketListUrl(type);

  this.metabotBridge
    .emit(MetabotActionType.OPEN_URL, {
      url,
      target: 'FULLSCREEN',
    })
    .then(r => console.log(r));
}
