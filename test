protected onCardClicked(type: FilterCardType, context: TicketContext): void {
  this.cardClickedOnce = true;

  if (this.activeCard === type) {
    this.activeCard = FilterCardType.NONE;

    // ‚úÖ Supprimer le param√®tre ?card de l'URL
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams: {},
      queryParamsHandling: 'merge',
      // üîÅ remove card key
      queryParams: { card: null }
    });

    this.currentPage = 0;
    this.scrollCompleted = false;
    this.tickets = [];
    this.ticketsCountTeam = 0;

    this.loadFullTicketList(context);
    return;
  }

  this.activeCard = type;

  // ‚úÖ Mettre √† jour l'URL avec la nouvelle carte s√©lectionn√©e
  this.router.navigate([], {
    relativeTo: this.route,
    queryParams: { card: type },
    queryParamsHandling: 'merge'
  });

  this.currentPage = 0;
  this.scrollCompleted = false;
  this.tickets = [];
  this.ticketsCountTeam = 0;

  this.cardConfigFactory.loadTicketsByCard(type, context).subscribe({
    next: (response) => this.handleTicketResponse(response, context),
    error: (err) => console.error('Erreur lors du chargement des tickets pour la carte s√©lectionn√©e :', err)
  });
}
