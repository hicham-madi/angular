// page-header.component.ts
@Output() tabClick = new EventEmitter<Tab>();

protected handleTabClick(tab: Tab): void {
  this.activeTab = tab;
  this.tabClick.emit(tab);                  // << informer le parent
  this.maximize();

  // (optionnel) garder la navigation ici
  this.router.navigate([this.tabsUrls.get(tab)!], {
    queryParams: {}
  });
}

<!-- page-header.component.html -->
<button class="text-button tab"
        (click)="handleTabClick(tab)">
  {{ tab }}
</button>

// ticket-list-page.component.ts (le parent)
@ViewChild(FilterBarComponent) filterBar?: FilterBarComponent;

private readonly DEFAULT_SORT = { sortKey: 'lastActivityTimestamp', isAsc: false };

onHeaderTabClick(tab: Tab): void {
  this.resetUI();                         // << tout remettre à zéro

  // (si tu déplaces la nav ici plutôt que dans le header)
  // this.router.navigate([this.tabsUrls.get(tab)!], { queryParams: {} });
}

private resetUI(): void {
  // filtres
  this.searchTerm = '';
  this.selectedStatus = '';
  this.selectedAgency = '';
  this.selectedCollaborator = '';
  this.selectedCampaign = '';

  // tri / pagination / carte active
  this.currentPage = 0;
  this.currentSort = { ...this.DEFAULT_SORT };
  this.activeCard = FilterCardType.NONE;

  // reset visuel des inputs du composant enfant
  this.filterBar?.resetFilters?.();

  // recharger la liste
  this.applyFilters();
}

<!-- ticket-list-page.component.html -->
<metabot-page-header
  [currentCount]="ticketsCountSolicitations"
  (tabClick)="onHeaderTabClick($event)">
</metabot-page-header>
