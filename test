<div class="table-wrapper uk-flex uk-flex-column">
  <!-- HEADER FIXE -->
  <table mat-table [dataSource]="[]" class="mat-elevation-z8">
    <ng-container *ngFor="let column of displayedColumns" [matColumnDef]="column">
      <th mat-header-cell *matHeaderCellDef [ngStyle]="columnConfig[column]?.style || {}">
        <span class="column-label" [innerHTML]="columnConfig[column]?.label || column"></span>

        <ng-container *ngIf="column === 'action'">
          <mat-icon class="sort-icon" fontIcon="{{ getSortIcon(column) }}"></mat-icon>
        </ng-container>
      </th>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  </table>

  <!-- CONTENU SCROLLABLE -->
  <cdk-virtual-scroll-viewport itemSize="50" class="virtual-scroll-viewport">
    <table mat-table [dataSource]="tickets" class="mat-elevation-z8">
      <ng-container *ngFor="let column of displayedColumns" [matColumnDef]="column">
        <td mat-cell *matCellDef="let row" [ngStyle]="columnConfig[column]?.style || {}">
          <ng-container *ngIf="columnTemplates[column]">
            <ng-container
              *ngTemplateOutlet="columnTemplates[column]; context: { $implicit: row }"
            ></ng-container>
          </ng-container>
        </td>
      </ng-container>

      <tr
        mat-row
        *matRowDef="let row; columns: displayedColumns"
        [class.readCustomer]="isReadCustomer(row)"
        (click)="rowClick?.(row)"
      ></tr>
    </table>
  </cdk-virtual-scroll-viewport>
</div>

.table-wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;

  table {
    width: 100%;
    table-layout: fixed;
    border-spacing: 0;

    th.mat-header-cell {
      position: sticky;
      top: 0;
      z-index: 2;
      background: white; // ou une couleur de ton design
      border-bottom: 1px solid #e0e0e0;
    }

    td.mat-cell {
      border-bottom: 1px solid #f2f2f2;
    }
  }

  .virtual-scroll-viewport {
    flex: 1;
    height: calc(100vh - 200px); // adapte si besoin
    overflow: auto;
  }
}

