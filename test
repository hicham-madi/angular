// mbot.service.ts (ou service équivalent)
export enum Tab {
  SOLICITING = 'Mes sollicitations',
  MY_TEAM = 'Mon équipe',
  TERMINATED = 'Terminées',          // déjà présent
  // (pas obligé d’ajouter TERMINATED_TEAM si on gère avec un flag)
}

private openedFromTab: Tab = Tab.SOLICITING;
private openedFromTerminated = false;

public setOpenedFromTab(tab: Tab, isTerminated = false): void {
  this.openedFromTab = tab;
  this.openedFromTerminated = isTerminated;
}

public getOpenedFromTab(): Tab {
  return this.openedFromTab;
}

public getOpenedFromTerminated(): boolean {
  return this.openedFromTerminated;
}

// page-header.component.ts
constructor(
  private readonly router: Router,
  private readonly jwtService: JwtService,
  private readonly metabotBridge: MetabotBridgeService,
  private readonly mbotService: MbotService,           // <— injecte le service
) {}

public ngOnInit(): void {
  const pair = Array.from(this.tabsUrls).find(([_, url]) => this.router.url === url);
  if (pair) this.activeTab = pair[0];

  // initialise l’origine en fonction de l’URL courante
  const isTerminated = this.router.url.includes('/terminated-list');
  this.mbotService.setOpenedFromTab(this.activeTab, isTerminated);
}

protected handleTabClick(tab: Tab): void {
  this.activeTab = tab;
  this.maximize();

  const url = this.tabsUrls.get(this.activeTab) ?? '/ticket-list';

  // quand on change d’onglet, on n’est pas en “terminated” par défaut
  this.mbotService.setOpenedFromTab(tab, false);

  this.router.navigate([url]);
}
// là où tu fais la navigation vers terminated/ongoing (ex: TicketsPageBase.onTabChange)
const base = this.getBaseListSegment(); // 'ticket-list' ou 'team-list'
const isTerminated = tabValue !== 'ongoing';
this.mbotService.setOpenedFromTab(
  this.currentContext === TicketContext.TEAM ? Tab.MY_TEAM : Tab.SOLICITING,
  isTerminated
);

this.router.navigate(isTerminated ? ['/', base, 'terminated-list'] : ['/', base], {
  queryParamsHandling: 'merge',
});

// ticket-header-info.component.ts
protected goToList(): void {
  if (!this.listService.loadingResolver) {
    this.listService.getCurrentParams().claimCodeFilter = [];
    this.listService.setCurrentSelectedTicket('');
    this.listService.loadingResolver = true;
    this.closeTicket(false);
  }

  const fromTab = this.mbotService.getOpenedFromTab();
  const fromTerminated = this.mbotService.getOpenedFromTerminated();

  const lastCard = localStorage.getItem('lastSelectedCard');
  const queryParams = lastCard ? { card: lastCard } : undefined;

  const route: string[] = ['ticket-list'];

  if (fromTab === Tab.MY_TEAM) {
    route.push('team-list');
    if (fromTerminated) route.push('terminated-list');
  } else if (fromTab === Tab.TERMINATED) {
    // si tu utilises encore ce tab
    route.push('terminated-list');
  } else {
    // Mes sollicitations
    if (fromTerminated) {
      route.push('terminated-list');
    }
  }

  this.router.navigate(route, {
    ...(queryParams && { queryParams }),
    ...(queryParams && { queryParamsHandling: 'merge' }),
  });

  this.mbotService.clearOpenedFromTab?.(); // optionnel si tu veux reset
}

