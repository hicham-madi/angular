import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.zef.wikipg.service.model.mongo.primary.ticket.Ticket;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class TicketStatsService {

    private final HazelcastInstance hazelcastInstance;

    private static final Map<FilterCardType, PredicateContextual> CARD_TYPE_PREDICATES = new EnumMap<>(FilterCardType.class);

    static {
        CARD_TYPE_PREDICATES.put(
            FilterCardType.TREATMENT_IS_LATE_DS,
            (userId, edsId, edsChilds, isPrivate) -> TicketCriteria.treatmentIsLateDs(userId, edsId, edsChilds, isPrivate)
        );
        // ðŸ‘‰ Ajoutez ici les autres prÃ©dicats (READ_CUSTOMER, CLAIMS...) si nÃ©cessaire
    }

    @FunctionalInterface
    private interface PredicateContextual {
        Predicate<Object, Ticket> toPredicate(String userId, String edsId, List<String> edsChilds, boolean isPrivate);
    }

    public TicketCardsDto computeStats(String userId, String edsId, List<String> edsChilds, boolean isPrivate) {
        IMap<UUID, Ticket> ticketMap = hazelcastInstance.getMap("ticket-cache");

        Map<FilterCardType, Long> counts = CARD_TYPE_PREDICATES.entrySet().stream()
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                entry -> ticketMap.values(entry.getValue().toPredicate(userId, edsId, edsChilds, isPrivate)).size()
            ));

        return TicketCardsDto.builder()
            .treatmentIsLateDs(counts.getOrDefault(FilterCardType.TREATMENT_IS_LATE_DS, 0L).intValue())
            // .readCustomer(...) etc. ajoutez les autres counts ici si ajoutÃ©s dans CARD_TYPE_PREDICATES
            .build();
    }
}
TicketCardsDto ticketStatsDto = ticketStatsService.computeStats(
    customer.getId(),
    customer.getEdsId(),
    new ArrayList<>(), // ou customer.getEdsChilds() si disponible
    filters.isPrivate()
);
