// Affichage icône : neutre si aucune colonne n'est marquée comme triée
protected getSortIcon(column: string): string {
  if (!this.sort || this.sort.sortKey !== column) {
    return 'unfold_more';
  }
  return this.sort.isAsc ? 'arrow_upward' : 'arrow_downward';
}

protected sortData(column: string): void {
  // 1er clic sur une colonne : tri ascendant et icône active
  if (!this.sort || this.sort.sortKey !== column) {
    this.sort = { sortKey: column, isAsc: true };
    this.sortChanged.emit({ sortKey: this.sort.sortKey, isAsc: this.sort.isAsc });
    return;
  }

  // 2e clic : desc
  if (this.sort.isAsc === true) {
    this.sort.isAsc = false;
    this.sortChanged.emit({ sortKey: this.sort.sortKey, isAsc: this.sort.isAsc });
    return;
  }

  // 3e clic : RESET -> on applique le tri par défaut côté parent,
  // mais on remet l'état local à NEUTRE pour que l'icône reste 'unfold_more'
  this.sortChanged.emit({ sortKey: 'lastActivityTimestamp', isAsc: false }); // tri défaut pour l'API
  this.sort = { sortKey: null, isAsc: null }; // <- icône neutre
}
