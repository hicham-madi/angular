<button
  class="tab"
  [class.active]="selected === tab.value"
  [attr.aria-selected]="selected === tab.value"
  (click)="onTabClicked(tab.value, $event)"
>
  {{ tab.label }}
  @if (tab.label !== 'Termin√©es') {
    <span class="count">{{ tab.label === 'Ouvertes' ? currentCount : tab.count }}</span>
  }
</button>

export class StatusTabsComponent {
  @Input() public tabs: Status[] = [];
  @Input() public currentCount?: number;
  @Output() public tabChange = new EventEmitter<string>();

  private _selectedTab?: string;
  public selected?: string;

  /** anti double-click lock */
  private clicking = false;
  private static CLICK_COOLDOWN_MS = 350;

  @Input() set selectedTab(value: string | undefined) {
    this._selectedTab = value;
    this.selected = value;
    this.cdr.markForCheck();
  }
  get selectedTab() { return this._selectedTab; }

  constructor(private readonly cdr: ChangeDetectorRef) {}

  ngOnInit(): void {
    this.selected = this._selectedTab ?? this.tabs[0]?.value;
  }

  public onTabClicked(tabValue: string, ev?: MouseEvent) {
    // ignore if already active or if a click is in progress
    if (this.selected === tabValue || this.clicking) {
      ev?.preventDefault();
      ev?.stopPropagation();
      return;
    }
    this.clicking = true;
    this.selected = tabValue;
    this.tabChange.emit(tabValue);

    // small cooldown to swallow accidental double-clicks
    setTimeout(() => (this.clicking = false), StatusTabsComponent.CLICK_COOLDOWN_MS);
  }
}

private isSwitchingTab = false;

protected onTabChange(tabValue: string): void {
  if (this.isSwitchingTab || this.isLoading) return;            // guard
  this.isSwitchingTab = true;

  // clear any selected card when switching tabs
  this.activeCard = FilterCardType.NONE;

  const isOngoing = tabValue === 'ongoing';
  const base = this.getBaseListSegment();                       // your helper

  const commands = isOngoing ? ['/', base] : ['/', base, 'terminated-list'];

  this.router.navigate(commands, {
    queryParamsHandling: 'merge',
    queryParams: { card: null },                                // drop stale card
  }).finally(() => {
    // reset and fetch once route settles
    this.resetPagination?.();
    // use your existing loader that now combines sort + filters + (no card)
    this.loadTickets(this.activeCard);
    this.isSwitchingTab = false;
  });
}
