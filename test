// tickets-page.base.ts

public ngOnInit(): void {
  const data = this.route.snapshot.data['prefetch'] as TicketListPrefetch;
  ...
  this.ticketCardInfos = data?.stats ?? this.ticketCardInfos; // conserve les compteurs
  ...
  this.initialization(this.currentContext);
  this.hydrateFromResponse(data.tickets, true);
}

public hydrateFromResponse(response: MbotList, shouldInitCards: boolean): void {
  this.handleTicketResponse(response);
  this.updateMetalLists(response);
  if (shouldInitCards) {
    this.buildCardsFrom(); // <-- sans param
  }
}

private buildCardsFrom(): void {
  // ⚠️ n’écrase plus ticketCardInfos ici
  const { smallCards, largeCards } =
    this.cardConfigFactory.countCards(this.ticketCardInfos, this.activeCard, this.cardClicked);

  let small = smallCards;
  let large = largeCards;

  if (TicketContext.SOLICITATIONS !== this.currentContext && TicketContext.TEAM !== this.currentContext) {
    large = large.filter(card => card.type !== 'APPROVALS' && card.type !== 'DISCUSSION_GROUPS');
  }
  if (TicketContext.REGIONAL_FUND === this.currentContext) {
    large = large.filter(card => card.type !== 'FOUND_CUSTOMERS');
  }

  const disabled = this.cardConfigFactory.getDisabledCardTypes(
    this.enableReclamation, this.enableDiscussionGroupForCustomer, this.enableDs
  );

  if (TicketContext.REGIONAL_FUND === this.currentContext &&
      TicketContext.TERMINATED !== this.currentContext &&
      TicketContext.TERMINATED_TEAM !== this.currentContext) {
    this.smallCards = small.filter(card => !disabled.has(card.type));
  }
  this.largeCards = large.filter(card => !disabled.has(card.type));

  this.cdr.detectChanges();
}
