public MbotPageDtoV2 getTicketsForCard(MbotRequestDataDto mbotRequestData) {
    // 1️⃣ Déterminer la carte sélectionnée via le paramètre front
    CardTypeConfig cardTypeConfig = CardTypeConfig.valueOf(mbotRequestData.getCardType());

    // 2️⃣ Construire le filtre de base depuis les infos front (optionnel si besoin)
    TicketFiltersDto filters = ticketBuilderService.buildTicketFilterFromMbotRequestData(new Customer(), mbotRequestData);

    // 3️⃣ Appeler le repository avec le CardTypeConfig
    String customerId = mbotRequestData.getCustomerId(); // id transmis par le front
    List<Ticket> tickets = ticketRepository.findTicketsForCard(customerId, cardTypeConfig);

    // 4️⃣ Construire les stats éventuelles
    TicketCardDto ticketStatsDto = ticketStatsService.computeStats(tickets, securityService.getAuthUser().getId());

    // 5️⃣ Mapper les tickets au DTO light
    List<MbotTicketLightDto> ticketLightDtos = IMapperTicket.INSTANCE.listTicketToListMbotTicketDto(tickets);

    // 6️⃣ Retourner la pagination
    return MbotPageDtoV2.builder()
        .tickets(PageableExecutionUtils.getPage(ticketLightDtos, FiltersHelper.getPageable(filters), tickets::size))
        .stats(ticketStatsDto)
        .build();
}
