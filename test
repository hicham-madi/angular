protected onCardClicked(type: FilterCardType): void {
  if (this.activeCard === type) {
    // Cas : la carte sélectionnée est déjà active → désélectionner
    this.activeCard = FilterCardType.NONE;
    this.currentPage = 0;
    this.scrollCompleted = false;

    // Désactiver toutes les cartes visuellement
    [...this.smallCards, ...this.largeCards].forEach(card => {
      card.active = false;
      card.badges?.forEach(badge => badge.active = false);
    });

    // Charger toute la liste sans filtrage
    this.loadFullTicketList();
    return;
  }

  // Cas : nouvelle carte sélectionnée → activer la carte choisie
  [...this.smallCards, ...this.largeCards].forEach(card => {
    card.active = false;
    card.badges?.forEach(badge => badge.active = false);
  });

  const selectedCard = [...this.smallCards, ...this.largeCards].find(card => card.type === type);
  if (selectedCard) {
    selectedCard.active = true;
  }

  this.activeCard = type;
  this.currentPage = 0;
  this.scrollCompleted = false;

  // Charger les tickets filtrés selon la carte
  this.cardConfigFactory.loadTicketsByCard(type, this.currentPage, this.pageSize).subscribe({
    next: (response) => this.handleTicketResponse(response),
    error: (err) => console.error('Erreur lors du chargement des tickets pour la carte sélectionnée :', err)
  });
}private loadFullTicketList(): void {
  this.cardConfigFactory.loadTicketsByCard(FilterCardType.NONE, this.currentPage, this.pageSize).subscribe({
    next: (response) => this.handleTicketResponse(response),
    error: (err) => console.error('Erreur lors du chargement de la liste complète des tickets :', err)
  });
}

