public List<Ticket> findMatchingTickets(String envId, String customerId, String edsId, String context) {
    Predicate<Object, Ticket> p1 = null, p2 = null, p3 = null, p4 = null, p5 = null;

    if (TicketContext.SOLICITATIONS.getName().equals(context)) {
        p1 = TicketCriteria.requests(customerId);
        p2 = TicketCriteria.claims(customerId);
        p3 = TicketCriteria.approvals(""); // TODO: managedId ?
        p4 = TicketCriteria.discussionGroups("", edsId);
        p5 = TicketCriteria.requestsExpertService("", edsId);
    } else if (TicketContext.TEAM.getName().equals(context)) {
        p1 = TicketCriteria.requests(customerId);
        p2 = TicketCriteria.claims(customerId);
        p3 = TicketCriteria.approvals(customerId);
        p4 = TicketCriteria.discussionGroups(customerId, edsId);
        p5 = TicketCriteria.requestsExpertService(customerId, edsId);
    } else {
        return Collections.emptyList();
    }

    Predicate<Object, Ticket> predicate = Predicates.or(p1, p2, p3, p4, p5);

    return hazelcastTicketRepository
            .findByViewTypeAndPredicate(envId,
                    Arrays.asList(InMemoryViewEnum.ON_GOING, InMemoryViewEnum.TO_PROCESS),
                    predicate)
            .stream()
            .distinct()
            .toList();
}

refactor: remplacement des cha√Ænes de contexte par l'enum TicketContext
