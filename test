// tickets-page.base.ts
export abstract class TicketsPageBase {
  private booting = true;   // NEW

  public ngOnInit(): void {
    const data = this.route.snapshot.data['prefetch'] as TicketListPrefetch;

    // 1) Appliquer d'abord les stats & tickets du resolver
    this.ticketCardInfos = data.stats;      // <-- conserve les compteurs
    this.currentContext  = data.context;
    this.currentTab      = data.initialTab;

    if (!this.displayedColumns.length) this.displayedColumns = data.config.displayedColumns;
    if (!Object.keys(this.columnConfig || {}).length) this.columnConfig = data.config.columnConfig;

    // 2) Définir la carte active sans déclencher de rechargement
    this.activeCard = data.cardType ?? FilterCardType.NONE;
    if (this.activeCard && this.activeCard !== FilterCardType.NONE) {
      localStorage.setItem('lastSelectedCard', this.activeCard.toString());
      this.applyColumnsForCard(this.activeCard); // ajuste les colonnes (FOUND_CUSTOMERS, etc.)
    } else {
      localStorage.removeItem('lastSelectedCard');
    }

    // 3) Hydrater la table avec les tickets déjà résolus
    this.hydrateFromResponse(data.tickets, true);

    // 4) Fin de boot : les changements d’URL pourront déclencher onCardClicked
    this.booting = false;
  }

  protected initialization(context: TicketContext): void {
    this.currentContext = context;

    this.route.queryParamMap.subscribe((params) => {
      if (this.booting) return; // NEW: ignorer le 1er passage

      const cardType = params.get('card') as FilterCardType;
      this.applyColumnsForCard(this.activeCard);

      if (cardType && this.activeCard !== cardType) {
        this.onCardClicked(cardType); // déclenchera alors le WS
      } else if (!cardType) {
        this.activeCard = FilterCardType.NONE;
      }

      if (cardType && cardType !== FilterCardType.NONE) {
        localStorage.setItem('lastSelectedCard', cardType.toString());
      } else {
        localStorage.removeItem('lastSelectedCard');
      }
    });
  }
}
