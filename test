public static Predicate<Object, Ticket> getAllTicketsPredicate(String customerId, String customerEdsId) {
    List<Predicate<Object, Ticket>> predicates = new ArrayList<>();

    // Blocs "DS en retard"
    Predicate<Object, Ticket> dsLatePredicate = Predicates.and(
        Predicates.equal("ds.treatmentIsLate", true),
        Predicates.in("claimType.code", "DS"),
        Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
        Predicates.or(
            Predicates.equal("ds.collabTreatmentDone", false),
            Predicates.and(
                Predicates.equal("ds.collabTreatmentDone", true),
                Predicates.equal("readCustomer", false)
            )
        ),
        Predicates.or(
            Predicates.equal("customer._id", customerId),
            Predicates.and(
                Predicates.equal("customer.eds", true),
                Predicates.equal("customer.edsId", customerEdsId)
            )
        )
    );
    predicates.add(dsLatePredicate);

    // Blocs "DS non lus"
    Predicate<Object, Ticket> dsUnreadPredicate = Predicates.and(
        Predicates.equal("readCustomer", false),
        Predicates.in("claimType.code", "DS"),
        Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
        Predicates.or(
            Predicates.equal("ds.collabTreatmentDone", false),
            Predicates.and(
                Predicates.equal("ds.collabTreatmentDone", true),
                Predicates.equal("readCustomer", false)
            )
        ),
        Predicates.or(
            Predicates.equal("customer._id", customerId),
            Predicates.and(
                Predicates.equal("customer.eds", true),
                Predicates.equal("customer.edsId", customerEdsId)
            )
        )
    );
    predicates.add(dsUnreadPredicate);

    // Blocs "DS affectées à l'unité"
    Predicate<Object, Ticket> dsAssignedUnitPredicate = Predicates.and(
        Predicates.equal("customer.eds", true),
        Predicates.equal("customer.edsId", customerEdsId),
        Predicates.in("claimType.code", "DS")
    );
    predicates.add(dsAssignedUnitPredicate);

    // Blocs "Requêtes D/DC"
    Predicate<Object, Ticket> requestDDCPredicate1 = Predicates.and(
        Predicates.in("claimType.code", "D", "DC"),
        Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
        Predicates.equal("customer._id", customerId)
    );
    Predicate<Object, Ticket> requestDDCPredicate2 = Predicates.and(
        Predicates.in("claimType.code", "D", "DC"),
        Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
        Predicates.equal("customer._id", customerId),
        Predicates.equal("readCustomer", false)
    );
    predicates.add(requestDDCPredicate1);
    predicates.add(requestDDCPredicate2);

    // Blocs "Requêtes RC"
    Predicate<Object, Ticket> requestRCPredicate = Predicates.and(
        Predicates.in("claimType.code", "RC"),
        Predicates.in("status", "NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
        Predicates.equal("customer._id", customerId),
        Predicates.equal("readCustomer", false)
    );
    predicates.add(requestRCPredicate);

    // Blocs "Approbations"
    Predicate<Object, Ticket> approvalsPredicate = Predicates.and(
        Predicates.equal("approval.manager", customerId),
        Predicates.or(
            Predicates.equal("status", "APPROVAL_PENDING"),
            Predicates.and(
                Predicates.equal("status", "APPROVAL_REFUSED"),
                Predicates.equal("approval.discussion", true)
            )
        )
    );
    predicates.add(approvalsPredicate);

    // Blocs "Groupes de discussion"
    Predicate<Object, Ticket> discussionGroupsPredicate = Predicates.equal("discussionGroup.users._id", customerId);
    predicates.add(discussionGroupsPredicate);

    // Blocs "Groupes de discussion non lus"
    Predicate<Object, Ticket> discussionGroupsUnreadPredicate = Predicates.and(
        Predicates.equal("discussionGroup.users._id", customerId),
        Predicates.equal("discussionGroup.users.ticketRead", false)
    );
    predicates.add(discussionGroupsUnreadPredicate);

    // Retourner le OR global avec tous les blocs
    return Predicates.or(predicates.toArray(new Predicate[0]));
}
