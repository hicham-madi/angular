public TicketCardsDto computeStats(List<Ticket> tickets, String userId, String edsId, List<String> edsChilds, boolean isPrivate)

CARD_TYPE_PREDICATES.put(FilterCardType.TREATMENT_IS_LATE_DS, (ticket, userId, edsId, edsChilds, isPrivate) -> {
    return new TicketStatsService().evaluateHazelcastPredicate(
        TicketCriteria.treatmentIsLateDs(userId, edsId, edsChilds, isPrivate), ticket
    );
});

@FunctionalInterface
private interface PredicateContextual {
    boolean test(Ticket ticket, String userId, String edsId, List<String> edsChilds, boolean isPrivate);
}

if (entry.getValue().test(ticket, userId, edsId, edsChilds, isPrivate)) {

List<String> edsChilds = filters.getEdsChilds(); // ou un fallback vide si null
boolean isPrivate = filters.isPrivate(); // selon ton mod√®le

TicketCardsDto ticketStatsDto = ticketStatsService.computeStats(tickets, customer.getId(), customer.getEdsId(), edsChilds, isPrivate);
