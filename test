protected onCardClicked(type: FilterCardType): void {
  const nextCard = this.activeCard === type ? FilterCardType.NONE : type;
  this.activeCard = nextCard;          // état local
  this.resetPagination();

  this.router.navigate([], {
    relativeTo: this.route,
    queryParams: { card: nextCard === FilterCardType.NONE ? null : nextCard },
    queryParamsHandling: 'merge'
  });
}

public ngOnInit(): void {
  const data = this.route.snapshot.data['prefetch'] as TicketListPrefetch;

  this.currentContext = data.context;
  this.currentTab = data.initialTab;

  if (!Object.keys(this.columnConfig || {}).length) {
    this.columnConfig = data.config.displayedColumns;
  }

  // card initiale (URL au moment de l’arrivée)
  this.activeCard = (data.cardType ?? FilterCardType.NONE);

  // garder (optionnel) le lastSelectedCard
  if (this.activeCard && this.activeCard !== FilterCardType.NONE) {
    localStorage.setItem('lastSelectedCard', this.activeCard.toString());
  } else {
    localStorage.removeItem('lastSelectedCard');
  }

  // init locale + hydratation avec le resolver (AUCUN WS ici)
  this.initialization(this.currentContext);
  this.hydrateFromResponse(data.tickets);

  // ==== source unique de chargement après coup ====
  this.sub = this.route.queryParamMap.pipe(
    map(p => (p.get('card') as FilterCardType) ?? FilterCardType.NONE),
    // ne pas relancer si la valeur initiale est identique
    distinctUntilChanged(),
    switchMap(card => {
      if (card === this.activeCard) {
        return EMPTY; // évite l’appel juste après l’arrivée
      }
      this.activeCard = card;
      this.resetPagination();
      const opts = this.buildOpts(); // ton builder d'options
      return this.loadTicketsByCard(card, this.currentContext, 0, opts);
    })
  ).subscribe({
    next: res => this.hydrateFromResponse(res),
    error: err => { console.error('Erreur chargement par carte :', err); this.isLoading = false; }
  });
}

protected goToList(): void {
  const route = ['/ticket-list']; // ou team-list selon contexte
  const lastCard = localStorage.getItem('lastSelectedCard') ?? null;

  this.router.navigate(route, {
    queryParams: lastCard ? { card: lastCard } : {},
    replaceUrl: true
  });
}
