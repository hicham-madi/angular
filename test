protected newIcon(ticket: Ticket): void {
  // 1) Optimistic update (immédiat côté UI)
  this.applyReadCustomerLocally(ticket, !ticket.readCustomer);

  this.mbotService.updateReadCustomer(ticket.id).subscribe({
    next: () => {
      // OK: on laisse la valeur appliquée
    },
    error: () => {
      // KO: rollback si l’API échoue
      this.applyReadCustomerLocally(ticket, !ticket.readCustomer);
    }
  });
}

// Met à jour **immuablement** le ticket + notifie le composant enfant (OnPush)
private applyReadCustomerLocally(ticket: Ticket, value: boolean): void {
  const idx = this.tickets.findIndex(t => t.id === ticket.id);
  if (idx === -1) return;

  // créer une **nouvelle** référence d’objet et de tableau
  const updated: Ticket = { ...this.tickets[idx], readCustomer: value };
  this.tickets = [
    ...this.tickets.slice(0, idx),
    updated,
    ...this.tickets.slice(idx + 1)
  ];

  this.cdr.markForCheck(); // ou this.cdr.detectChanges();
}
