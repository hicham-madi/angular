public class HazelcastRepository {

    public long countDsUnread(TicketFiltersDto filtersDto) {
        try {
            return hazelcastService.countByOrg(
                filtersDto.getEnvId(),
                HazelcastPredicate.getDsUnreadPredicate(filtersDto.getCustomerId())
            );
        } catch (JsonProcessingException e) {
            logger.error("Error reading Hazelcast data [{}]", filtersDto.getEnvId(), e);
            return 0;
        }
    }

    public List<Ticket> findMatchingTickets(String envId, String customerId) {
        Predicate<Object, Ticket> globalPredicate = Predicates.or(
            TicketCriteria.getPredicateDiscussionGroup(customerId),
            TicketCriteria.getPredicateClaimTypeDC(customerId),
            TicketCriteria.getPredicateClaimTypeDS(customerId),
            TicketCriteria.getPredicateCustomerEDS(customerId)
        );

        List<Ticket> filteredTickets = this.filterByViewsTypeAndPredicate(
            envId,
            Arrays.asList(InMemoryViewEnum.ON_GOING, InMemoryViewEnum.TO_PROCESS),
            globalPredicate
        );

        return filteredTickets.stream()
            .distinct()
            .toList();
    }
}
