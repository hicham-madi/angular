public List<Ticket> findAllMatchingTickets(String customerId) {
    Predicate<?, ?> globalPredicate = Predicates.or(
        // 1. Status = APPROVAL_PENDING or APPROVAL_REFUSED AND approval.discussion = true
        Predicates.and(
            Predicates.in("status", "APPROVAL_PENDING", "APPROVAL_REFUSED"),
            Predicates.equal("approval.discussion", true)
        ),

        // 2. Ticket affecté au manager = ORS3655 avec statut = PENDING / APPROVAL_PENDING / APPROVAL_REFUSED
        Predicates.and(
            Predicates.equal("assignedManager.id", customerId),
            Predicates.in("status", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED")
        ),

        // 3. Ticket client ORS3655 de type D, statut = NEW / PROCESSING / APPROVAL_PENDING / REFUSED
        Predicates.and(
            Predicates.equal("customer.id", customerId),
            Predicates.equal("claimType.code", "D"),
            Predicates.in("status", "NEW", "PROCESSING", "APPROVAL_PENDING", "APPROVAL_REFUSED")
        ),

        // 4. Ticket avec traitement non terminé, readCustomer = false, et client ORS3655
        Predicates.and(
            Predicates.equal("customer.id", customerId),
            Predicates.equal("readCustomer", false),
            Predicates.equal("ds.colaTreatmentDone", false)
        ),

        // 5. Ticket EDS = true pour le client
        Predicates.and(
            Predicates.equal("customer.id", customerId),
            Predicates.equal("customer.eds", true)
        )
    );

    IMap<String, Ticket> ticketMap = hazelcastInstance.getMap("tickets");

    return new ArrayList<>(ticketMap.values(globalPredicate));
}
