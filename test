private boolean ticketMatchesCardTypeConfig(Ticket ticket, FilterCardType config, String userId) {
    String edsId = ticket.getCustomer() != null ? ticket.getCustomer().getEdsId() : null;

    switch (config) {
        case READ_CUSTOMER:
            return fromHazelcastPredicate(TicketCriteria.readCustomer(userId, edsId)).test(ticket);

        case CLAIMS:
            return fromHazelcastPredicate(TicketCriteria.claims(userId)).test(ticket);

        case CLAIMS_READ_CUSTOMER:
            return fromHazelcastPredicate(TicketCriteria.claimsReadCustomer(userId)).test(ticket);

        case REQUESTS:
            return fromHazelcastPredicate(TicketCriteria.requests(userId)).test(ticket);

        case REQUESTS_READ_CUSTOMER:
            return fromHazelcastPredicate(TicketCriteria.requestsReadCustomer(userId)).test(ticket);

        case DISCUSSION_GROUPS_READ_CUSTOMER:
            return fromHazelcastPredicate(TicketCriteria.discussionGroupsReadCustomer(userId)).test(ticket);

        case REQUESTS_EXPERT_SERVICE:
            return fromHazelcastPredicate(TicketCriteria.requestsExpertService(userId)).test(ticket);

        case REQUESTS_EXPERT_SERVICE_READ_CUSTOMER:
            return fromHazelcastPredicate(TicketCriteria.requestsExpertServiceReadCustomer(userId)).test(ticket);

        case REQUESTS_EXPERT_SERVICE_TREATMENT_IS_LATE:
            return fromHazelcastPredicate(TicketCriteria.requestsExpertServiceTreatmentIsLate(userId)).test(ticket);

        case REQUESTS_EXPERT_SERVICE_EDS:
            return fromHazelcastPredicate(TicketCriteria.requestsExpertServiceEds(userId)).test(ticket);

        case TREATMENT_IS_LATE_DS:
            return fromHazelcastPredicate(TicketCriteria.treatmentIsLateDs(userId, edsId)).test(ticket);

        case CUSTOMER_EDS_DS:
            return fromHazelcastPredicate(TicketCriteria.customerEdsDs(edsId)).test(ticket);

        default:
            return false;
    }
}
