db.getCollection("tickets_CR882").find({
  $or: [
    // ðŸ”¹ Mes sollicitations non lues en tant que OW80700
    {
      $and: [
        { "claimType.code": { $in: ["D", "DC", "RC"] } },
        { "status": { $in: ["NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"] } },
        { "customer._id": "OW80700" },
        { "readCustomer": false }
      ]
    },

    // ðŸ”¹ Mes groupes de discussion non lus en tant que manager OW80700
    {
      "discussionGroup.users": {
        $elemMatch: {
          "_id": "OW80700",
          "ticketRead": false
        }
      }
    },

    // ðŸ”¹ Mes DS non lues en tant que OW80700
    {
      $and: [
        { "readCustomer": false },
        { "claimType.code": { $in: ["DS"] } },
        { "status": { $in: ["NEW", "PROCESSING", "PENDING", "APPROVAL_PENDING", "APPROVAL_REFUSED"] } },
        {
          $or: [
            { "ds.collabTreatmentDone": false },
            {
              $and: [
                { "ds.collabTreatmentDone": true },
                { "readCustomer": false }
              ]
            }
          ]
        },
        {
          $or: [
            { "customer._id": "OW80700" },
            {
              $and: [
                { "customer.eds": true },
                { "customer.edsId": "88200-00501" }
              ]
            }
          ]
        }
      ]
    }
  ]
});
public static Predicate<Object, Ticket> discussionGroups(String userId) {
    return entry -> {
        if (!(entry.getValue() instanceof Ticket ticket)) return false;

        DiscussionGroup group = ticket.getDiscussionGroup();
        if (group == null || group.getUsers() == null) return false;

        return group.getUsers().stream()
            .anyMatch(user -> userId.equals(user.getId()));
    };
}
case "DISCUSSION_GROUP_USERS":
    return TicketCriteria.discussionGroups(userId);
