private boolean ticketMatchesCardTypeConfig(Ticket ticket, CardTypeConfig config, String userId) {
    // Vérifie le claim type si défini dans la config
    if (!config.getClaimCodes().isEmpty() &&
            (ticket.getClaimType() == null || !config.getClaimCodes().contains(ticket.getClaimType().getCode()))) {
        return false;
    }

    // Vérifie le statut si défini dans la config
    if (!config.getStatuses().isEmpty() &&
            (ticket.getStatus() == null || !config.getStatuses().contains(ticket.getStatus().name()))) {
        return false;
    }

    // Vérifie les filtres additionnels de la config
    for (Map.Entry<String, Object> filter : config.getExtrafilters().entrySet()) {
        switch (filter.getKey()) {
            case "readCustomer":
                if (!Boolean.valueOf(filter.getValue().toString()).equals(ticket.getReadCustomer())) {
                    return false;
                }
                break;

            case "approval.manager":
                if (ticket.getApproval() == null ||
                        !filter.getValue().toString().equals(ticket.getApproval().getManager())) {
                    return false;
                }
                break;

            case "approval.discussion":
                if (ticket.getApproval() == null ||
                        !Boolean.valueOf(filter.getValue().toString()).equals(ticket.getApproval().isDiscussion())) {
                    return false;
                }
                break;

            case "discussionGroup.users._id":
                if (ticket.getDiscussionGroup() == null ||
                        ticket.getDiscussionGroup().getUsers().stream()
                                .noneMatch(u -> filter.getValue().toString().equals(u.getId()))) {
                    return false;
                }
                break;

            case "discussionGroup.users.ticketRead":
                if (ticket.getDiscussionGroup() == null ||
                        ticket.getDiscussionGroup().getUsers().stream()
                                .noneMatch(u -> Boolean.valueOf(filter.getValue().toString()).equals(u.isTicketRead()))) {
                    return false;
                }
                break;

            case "ds.treatmentIsLate":
                if (!Boolean.valueOf(filter.getValue().toString()).equals(ticket.isTreatmentIsLate())) {
                    return false;
                }
                break;

            case "ds.collabTreatmentDone":
                if (!Boolean.valueOf(filter.getValue().toString()).equals(ticket.isCollabTreatmentDone())) {
                    return false;
                }
                break;

            case "customer.eds":
                if (ticket.getCustomer() == null ||
                        !Boolean.valueOf(filter.getValue().toString()).equals(ticket.getCustomer().isEds())) {
                    return false;
                }
                break;

            case "customer.edsId":
                if (ticket.getCustomer() == null ||
                        !filter.getValue().toString().equals(ticket.getCustomer().getEdsId())) {
                    return false;
                }
                break;

            case "customer._id":
                if (ticket.getCustomer() == null ||
                        !filter.getValue().toString().equals(ticket.getCustomer().getId())) {
                    return false;
                }
                break;

            default:
                // Logger un warning pour un filtre inconnu (optionnel)
                break;
        }
    }

    return true;
}
