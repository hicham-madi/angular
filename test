public Comparator<Ticket> getComparator(String sortKey, boolean isAsc) {
    if (sortKey == null) {
        return null;
    }

    Comparator<Ticket> comparator = switch (sortKey) {
        case "ID" -> Comparator.comparing(Ticket::getId);

        case "LAST_ACTIVITY_TIMESTAMP" ->
            Comparator.comparing(Ticket::getLastActivityTimeStamp,
                Comparator.nullsLast(Comparator.naturalOrder()));

        case "PART_LABEL" ->
            Comparator.comparing(
                t -> t.getPart() != null ? t.getPart().getPartLabel() : null,
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        case "DOMAIN_LABEL" ->
            Comparator.comparing(
                t -> t.getDomain() != null ? t.getDomain().getLabel() : null,
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        case "OBJECT_LABEL" ->
            Comparator.comparing(
                t -> t.getObject() != null ? t.getObject().getLabel() : null,
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        case "CLAIM_TYPE_LABEL" ->
            Comparator.comparing(
                t -> t.getClaimType() != null ? t.getClaimType().getLabel() : null,
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        case "SLA_LABEL" ->
            Comparator.comparing(
                t -> t.getSla(),
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        case "STATUS_RANK" -> // <-- ici tri mÃ©tier
            Comparator.comparingInt(t -> rankOfStatus(t.getStatus()));

        case "STATUS" ->
            Comparator.comparing(
                Ticket::getStatus,
                Comparator.nullsLast(String::compareToIgnoreCase)
            );

        default -> null;
    };

    return comparator != null && !isAsc ? comparator.reversed() : comparator;
}
