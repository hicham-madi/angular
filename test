case "DISCUSSION_GROUP_USERS":
    return TicketCriteria.discussionGroups(userId);
case "DISCUSSION_GROUP_USERS":
    return TicketCriteria.discussionGroups(userId);
public class DiscussionGroupUserIdPredicate implements Predicate<Object, Ticket>, Serializable {

    private final String userId;

    public DiscussionGroupUserIdPredicate(String userId) {
        this.userId = userId;
    }

    @Override
    public boolean apply(Map.Entry<Object, Ticket> entry) {
        Ticket ticket = entry.getValue();
        if (ticket == null) return false;

        DiscussionGroup discussionGroup = ticket.getDiscussionGroup();
        if (discussionGroup == null || discussionGroup.getUsers() == null) return false;

        for (UserGroup user : discussionGroup.getUsers()) {
            if (userId.equals(user.getId())) {
                return true;
            }
        }

        return false;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof DiscussionGroupUserIdPredicate)) return false;
        DiscussionGroupUserIdPredicate that = (DiscussionGroupUserIdPredicate) obj;
        return Objects.equals(userId, that.userId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userId);
    }
}
public static Predicate<Object, Ticket> discussionGroups(String userId) {
    return new DiscussionGroupUserIdPredicate(userId);
}
TicketCriteria.discussionGroups(userId)
