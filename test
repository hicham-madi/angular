// 1) Normalise le type : peut arriver depuis l’URL en string
const normalizeCardType = (t: unknown): FilterCardType | undefined => {
  if (!t) return undefined;
  // Si déjà une valeur de l'enum string (ex: 'REQUESTS_EXPERT_SERVICE')
  if (Object.values(FilterCardType).includes(t as FilterCardType)) {
    return t as FilterCardType;
  }
  // Si clé de l'enum (ex: 'REQUESTS_EXPERT_SERVICE' côté clé)
  const byKey = (FilterCardType as any)[t as string];
  return byKey as FilterCardType | undefined;
};

// ---- plus bas dans loadTicketsByCard(...) ----

// Assigne d'abord cardType à partir de "type" (le param du method / de l'URL)
const ct = normalizeCardType(type);
if (ct && ct !== FilterCardType.NONE) {
  params.cardType = ct;
}

// Puis construis claimCodeFilter à partir de params.cardType
if (params.cardType) {
  // switch sur la STRING (sécurise la comparaison)
  const ctStr = String(params.cardType);
  const filters: string[] = [];

  switch (ctStr) {
    case 'CLAIMS':
      filters.push('RC');
      break;
    case 'REQUESTS':
      filters.push('D', 'DC');
      break;
    case 'REQUESTS_EXPERT_SERVICE':
      filters.push('DS');
      break;
  }

  params.claimCodeFilter = filters;
}
