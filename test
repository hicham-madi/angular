function emptyMbotListV2(pageSize = 20): MbotListV2 {
  return {
    tickets: {
      content: [],
      number: 0,
      size: pageSize,
      totalElements: 0,
      totalPages: 0,
    },
    stats: {      // adapt to your model
      claims: 0, approvals: 0, discussionGroupsReadCustomer: 0,
      requestsExpertService: 0, requestsExpertServiceReadCustomer: 0,
      requestsExpertServiceTreatmentIsLate: 0, requestsExpertServiceEds: 0,
    } as any,     // or build the exact structure you use
    statusList: [],
    agencyList: [],
    collaboratorsList: [],
    campaignsList: [],
    // add any other required fields from MbotList (e.g., counts) with neutral values
    ticket_count_opened: 0,
    ticket_count_closed: 0,
    ticket_count_draft: 0,
    ticket_count_approval: 0,
    ticket_count_claim: 0,
    ticket_count_eds: 0,
    enableGlobalSearchForCustomer: false,
    associatedTicket: [],
  };
}

return this.mbot.getTicketListV2(params).pipe(
  map((tickets) => ({
    context,
    initialTab,
    config: { displayedColumns, columnConfig },
    cardType,
    tickets,                    // already MbotListV2 (from API)
  })),
  catchError(() =>
    of({
      context,
      initialTab,
      config: { displayedColumns, columnConfig },
      cardType,
      tickets: emptyMbotListV2(base.size ?? 20),  // <-- valid MbotListV2
    }),
  ),
);
