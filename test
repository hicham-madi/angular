// solicitings-table.component.ts
@Output() public loadMore = new EventEmitter<{ sortKey: string | null; isAsc: boolean | null }>();
// (optionnel) si tu as encore besoin de scrolled "vide" pour autre chose, garde-le :
@Output() public scrolled = new EventEmitter<void>();

public onCdkScroll(): void {
  const viewport = this.cdkVirtualScroll!;
  const { end } = viewport.getRenderedRange();
  const total = viewport.getDataLength();
  const pageSize = 20;
  const currentPageEnd = (Math.floor(total / pageSize) - (this.hasPendingPage ? 1 : 0)) * pageSize;

  if (end >= currentPageEnd + pageSize) {
    this.loadMore.emit({
      sortKey: this.sort.direction ? this.sort.active : null,
      isAsc: this.sort.direction ? this.sort.direction === 'asc' : null,
    });

    // (optionnel) si quelqu’un écoute encore 'scrolled' sans payload :
    this.scrolled.emit();
  }
}

<metabot-solicitings-table
  [tickets]="tickets"
  ...
  (loadMore)="onScroll($event, TicketContext.SOLICITATIONS)">
</metabot-solicitings-table>

protected onScroll(
  sort: { sortKey: string | null; isAsc: boolean | null },
  context: TicketContext
): void {
  if (this.isLoading || this.allPagesLoaded) return;

  const nextPage = this.currentPage + 1;
  this.isLoading = true;

  const complete = () => {
    this.isLoading = false;
    this.currentPage = nextPage;
  };

  const opts =
    sort && sort.sortKey != null && sort.isAsc != null
      ? { sortKey: sort.sortKey, isAsc: sort.isAsc }
      : {};

  const card = this.activeCard ?? FilterCardType.NONE;

  this.cardConfigFactory
    .loadTicketsByCard(card, context, nextPage, opts)
    .subscribe({
      next: (response) => {
        this.handleTicketResponse(response, context);
        complete();
      },
      error: (err) => {
        console.error('Erreur lors du scroll :', err);
        complete();
      },
    });
}

loadTicketsByCard(
  type: FilterCardType,
  context: TicketContext,
  page = 0,
  opts?: { sortKey?: string | null; isAsc?: boolean | null }
) {
  const params: any = this.listService.reinitParam(page);
  params.context = context;
  if (context === TicketContext.TERMINATED) params.status = TicketStatus.CLOSED;

  if (opts?.sortKey != null && opts?.isAsc != null) {
    params.sortKey = opts.sortKey;
    params.isAsc = opts.isAsc;
  }

  return this.mbotService.getTicketListV2(params);
}
