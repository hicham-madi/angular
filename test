case "ACCOUNT_NUMBER": {
    // 1) Nettoyer : garder que les chiffres (au cas où il y ait des espaces/typos)
    String raw = query == null ? "" : query.trim();
    String digits = raw.replaceAll("\\D+", "");

    // 2) Tronquer à 11 si votre modèle est sur 11 chiffres (adaptez si besoin)
    if (digits.length() > 11) {
        digits = digits.substring(0, 11);
    }

    // 3) Si vous devez **aligner à 11** avec des zéros à gauche,
    // utilisez BigInteger pour éviter les overflows et conserver le formatage :
    String fmt = String.format("%011d", new java.math.BigInteger(digits.isEmpty() ? "0" : digits));

    // 4) Equality plutôt que regex si stocké en String en base
    return new Criteria().orOperator(
        Criteria.where(FORMS_FIELD).is(fmt),
        Criteria.where("comCliCoord.address.numAccount").is(fmt),
        Criteria.where("part.partAccount").is(fmt)
    );
}
