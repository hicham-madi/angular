import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';

type DateRangeGroup = FormGroup<{
  start: FormControl<Date | null>;
  end: FormControl<Date | null>;
}>;

@Component({
  selector: 'metabot-ticket-list-page',
  templateUrl: './ticket-list-page.component.html',
})
export class TicketListPageComponent implements OnInit {
  // Control pass√© √† <input-control>
  public dateRangeControl: DateRangeGroup = new FormGroup({
    start: new FormControl<Date | null>(null, { nonNullable: false }),
    end:   new FormControl<Date | null>(null, { nonNullable: false }),
  });

  ngOnInit(): void {
    // d√©faut = 90 derniers jours
    const today = new Date();
    const pastDate = new Date();
    pastDate.setDate(today.getDate() - 90);

    this.dateRangeControl.setValue({ start: pastDate, end: today }, { emitEvent: false });

    // appliquer le filtre √† chaque changement
    this.dateRangeControl.valueChanges.subscribe(({ start, end }) => {
      // s√©curit√©s basiques
      if (!start || !end) return;
      this.applyDateRangeFilter(start, end);
    });
  }

  private applyDateRangeFilter(start: Date, end: Date): void {
    // üëâ appelle ton WS / recharge la liste avec ces bornes
    // this.loadTickets({ dateFrom: start, dateTo: end, ... });
  }

  // (optionnel) pour r√©initialiser depuis un bouton
  public resetDateRange(): void {
    const today = new Date();
    const pastDate = new Date();
    pastDate.setDate(today.getDate() - 90);
    this.dateRangeControl.setValue({ start: pastDate, end: today });
  }
}

<!-- Range date : on passe le FormGroup au control -->
<input-control
  [type]="'INPUT_DATE_RANGE'"
  [control]="dateRangeControl">
</input-control>

<!-- (optionnel) bouton reset local -->
<!-- <button class="canard-fonce-button" (click)="resetDateRange()">R√©initialiser</button> -->
