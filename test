export class PageHeaderComponent {
  @Input() public currentCount: number | undefined;

  protected tabs: Tab[] = Object.values(Tab).filter(tab => tab !== Tab.TERMINATED);
  protected activeTab: Tab = this.tabs[0];

  private readonly tabsUrls = new Map<Tab, string>()
    .set(Tab.MY_TEAM, 'ticket-list/team-list')     // ⚠️ plus spécifique d'abord
    .set(Tab.SOLICITING, 'ticket-list');           // préfixe générique

  constructor(
    private readonly router: Router,
    private readonly jwtService: JwtService,
    private readonly metabotBridge: MetabotBridgeService
  ) {}

  public ngOnInit(): void {
    const update = () => {
      // on enlève la query string et le hash
      const url = this.router.url.split('?')[0].split('#')[0].replace(/^\/+/, '');
      const match = Array.from(this.tabsUrls.entries())
        // on vérifie d'abord les préfixes les plus longs
        .sort((a, b) => b[1].length - a[1].length)
        .find(([_, prefix]) => url.startsWith(prefix));

      this.activeTab = match?.[0] ?? this.tabs[0];
    };

    // initial + sur chaque navigation
    update();
    this.router.events.subscribe(e => {
      if (e instanceof NavigationEnd) update();
    });
  }

  protected showBadge(tab: string): boolean {
    return tab === Tab.SOLICITING;
  }

  protected handleTabClick(tab: Tab): void {
    this.activeTab = tab;
    this.maximize();

    const commands =
      tab === Tab.MY_TEAM ? ['/ticket-list', 'team-list'] : ['/ticket-list'];

    this.router.navigate(commands, { queryParamsHandling: 'merge' });
  }

  private maximize(): void {
    if (!this.jwtService.isEurekaEnv()) {
      this.metabotBridge.emit(MetabotActionType.MAXIMIZE, {}).then(r => console.log(r));
    }
  }
}
