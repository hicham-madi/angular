protected onScroll(scrolled: EventEmitter<void>, context: TicketContext): void {
  const page = ++this.currentPage;
  this.isLoading = true;

  const complete = () => {
    this.isLoading = false;
    this.currentPage = page;
    scrolled.emit();
  };

  if (this.activeCard === FilterCardType.NONE) {
    this.cardConfigFactory.loadTicketsByCard(FilterCardType.NONE, context, page).subscribe({
      next: (response) => {
        this.handleTicketResponse(response, context);
        complete();
      },
      error: (err) => {
        console.error('Erreur lors du scroll (sans filtre) :', err);
        complete();
      }
    });
  } else {
    this.cardConfigFactory.loadTicketsByCard(this.activeCard, context, page).subscribe({
      next: (response) => {
        this.handleTicketResponse(response, context);
        complete();
      },
      error: (err) => {
        console.error('Erreur lors du scroll (avec filtre) :', err);
        complete();
      }
    });
  }
}
