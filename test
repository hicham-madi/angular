public MbotPageDtoV2 getTicketsByCard(MbotRequestDataDto mbotRequestData) {
    User user = securityService.getAuthUser();
    Customer customer = this.getCustomer(user) != null ? this.getCustomer(user) : Customer.builder().build();

    TicketFiltersDto filters = ticketBuilderService.buildTicketFilterFromMbotRequestData(customer, mbotRequestData);
    Pageable pageable = FiltersHelper.getPageable(filters);

    List<Ticket> allTickets = hazelcastRepository.findMatchingTickets(
        user.getOrg(), filters.getCustomer().getId(), filters.getCustomer().getEdsId());

    CardTypeConfig cardTypeConfig;
    if (mbotRequestData.getCardType() != null) {
        cardTypeConfig = CardTypeConfig.valueOf(mbotRequestData.getCardType().toUpperCase());
    } else {
        cardTypeConfig = CardTypeConfig.NONE;
    }

    List<Ticket> filteredTickets;
    if (cardTypeConfig == CardTypeConfig.NONE) {
        // Pas de carte sélectionnée : retourner tous les tickets
        filteredTickets = allTickets;
    } else {
        // Carte sélectionnée : filtrer selon les règles de la carte
        filteredTickets = allTickets.stream()
            .filter(ticket -> ticketStatsService.ticketMatchesCardTypeConfig(
                ticket, cardTypeConfig, filters.getCustomer().getId()))
            .toList();
    }

    long totalElements = filteredTickets.size();

    // Pagination
    List<Ticket> paginatedTickets = filteredTickets.stream()
        .skip((long) pageable.getPageNumber() * pageable.getPageSize())
        .limit(pageable.getPageSize())
        .toList();

    List<MbotTicketLightDto> ticketLightDtos =
        IMapperTicket.INSTANCE.listTicketToListMbotTicketDto(paginatedTickets);

    return MbotPageDtoV2.builder()
        .tickets(new PageImpl<>(ticketLightDtos, pageable, totalElements))
        .build();
}
