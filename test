// remet l'écran dans l'état initial et relance la 1ère requête
private resetPageState(): void {
  // filtres
  this.searchTerm = '';
  this.selectedStatus = '';
  this.selectedAgency = '';
  this.selectedCollaborator = '';
  this.selectedCampaign = '';
  this.selectedSearchType = '';

  // pagination / scroll
  this.currentPage = 0;
  this.scrollCompleted = false;
  this.allPagesLoaded = false;
  this.tickets = [];
  this.loadedElements = 0;
  this.hasPendingPage = true;

  // carte active et query param `card`
  this.activeCard = FilterCardType.NONE;
  this.router.navigate([], {
    relativeTo: this.route,
    queryParams: { card: null },
    queryParamsHandling: 'merge',
    replaceUrl: true,
  });

  // tri (neutre) + signal au tableau pour remonter en haut
  this.currentSort = { sortKey: null, isAsc: null };   // SortState
  this.resetSortToken++;

  // 1er chargement (même logique que ngOnInit)
  const card = this.activeCard ?? FilterCardType.NONE;
  this.loadTicketsByCard(card, this.currentContext, 0, {
    // opts vides pour s’appuyer sur le tri par défaut backend
    searchTerm: '',
    statusFilter: '',
    agencyFilter: '',
    collaboratorFilter: '',
    campaignFilter: '',
    sortKey: null,
    isAsc: null,
  }).subscribe({
    next: (res) => this.handleTicketResponse(res),
    error: (err) => console.error('Erreur reload onglet :', err),
  });
}

protected onHeaderTabClick(): void {
  this.resetPageState();
}
