protected sortData(column: string): void {
  if (this.sort.active !== column) {
    this.sort.active = column;
    this.currentSortDirection = 'asc';
  } else {
    switch (this.currentSortDirection) {
      case 'asc':
        this.currentSortDirection = 'desc';
        break;
      case 'desc':
        this.currentSortDirection = null;
        break;
      default:
        this.currentSortDirection = 'asc';
    }
  }

  this.sort.direction = this.currentSortDirection ?? '';
  this.fetchTickets(
    this.currentSortDirection ? column : null,
    this.currentSortDirection
  );
}
protected getSortIcon(column: string): string {
  if (this.sort.active !== column || !this.currentSortDirection) {
    return 'unfold_more';
  }
  return this.currentSortDirection === 'asc' ? 'arrow_upward' : 'arrow_downward';
}
private fetchTickets(sortBy: string | null, sortDirection: 'asc' | 'desc' | null): void {
  const request = {
    page: 0,
    totalItems: this.tickets.length,
    ...(sortBy && sortDirection ? {
      sortKey: sortBy,
      isAsc: sortDirection === 'asc',
    } : {})
  };

  this.mbotService.getTicketListV2(request).subscribe(response => {
    this.tickets = response.tickets?.content ?? [];
    this.detectChanges();
  });
}
